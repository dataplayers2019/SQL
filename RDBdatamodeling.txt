◎ RDB Data Modeling
  (이고잉 관계형 테이터 모델링 강의 참고 https://www.youtube.com/playlist?list=PLuHgQVnccGMDF6rHsY9qMuJMd295Yk4sa )

 데이터 모델링에서 주요목적은 복잡한 현실를 데이터베스의 표에 담는 작업

	데이터 모델링의 순서도  
	>> 업무파악 -> 개념적 데이터 모델링 -> 논리적 데이터 모델링 -> 물리적 데이터 모델링
 
 1. 업무파악   
	현실의 문제를 컴퓨터 프로그램을 통해 해결할 수 있게 내용을 정리하는 것으로 
	클라이언트가 요구하는 니즈를 이해하고 UI를 그려 필요한 내용을 기획서에 담아 클라이언트의 생각과 일치하는지 체크하는 것

 2. 개념적 데이터 모델링
	업무파악을 통해 그려진 기획서를 활용하여 개념을 뽑아내는 과정으로 이는 필터(ERD, Entity Relationship Diagram)를 통해 
	정보,그룹,관계로 구성된 표로 제작
	- RDB는 내포관계를 허용하지 않습니다. (ex : 글 > 댓글 > 저자 ) 
	- 주제에 따라 표를 나누어야하고, 서로 연관된 키워드를 통해 필요한 기능을 추출함. (주제별 평형관계)
	
	1. ERD(Entity Relationship Diagram)의 구성요소 
		□ Entity      → Table
		○ Attribute   → Column
		◇ Relation    → PK (primary key), FK (foreign key)
			※ join을 통해 연결
		- Tuple →  Row 	
		
	2. Entity 정의
		사용자가 보고 사용되어지는 User Interface 의 원인이 되어 Database 에서 정보를 변경하고 그로 인핸 다시 UI에 내용이 표시되므로
		이 두가지 인과관계를 통해서 구동되는 원리임. 
		따라서 기획자와 UI 그리고 DB 개발자 상호간의 커뮤니케이션이 중요함.
		
	3. Attribute(속성) 정의 
		본 강의 내에서 속성은 글을 구성하는 제목, 작성일, 본문 실제 내용이다. 
		
	4. Identifier(식별자) 정의 
		원하는 대상을 정확하게 타겟팅하는 것으로 중복되면 안되며 향후 기본키(primary key)로 지정
		1. candidate key(후보키) : 식별자가 될만한 후보군, 후보군 안에 기본키(primary key)와 대체키(alternate key)로 나뉨
		2. composite key(중복키) : 두가지 속성을 합쳐야 식별 가능
		3. 식별자가 될만한 속성이 없는 경우 인조, 대리키를 만들어 식별자 역할 부여, autoincrement, sequence 이용 
		
	5. Relationship (엔티티간의 연결)
		PK, FK로 연결하여 필요한 데이터를 추출함
		
		1. Cardinality(기수)
			ex : "담임"은 한개의 "반"을 담당한다고 하고, 반은 하나의 담임을 정할수 있다면 이는 1:1 관계
				 저자는 여러글을 작성할 수 있는데 각 댓글은 하나의 저자만 존재한다면 1:N 
				 각 저자는 여러 글을 작성하고, 각 글은 여러 저자가 존재한다면 N:M 
		
		2. Optionality 
			각각의 대응관계가 필수가 아니라 선택일 경우
			ex : 각 저자는 댓글을 작성하지 않을 수도 있음 (저자 Mandatory : 댓글 Optional 관계)  
			
	※ 참고 http://erd.yah.ac/ 
	
 3. 논리적 데이터 모델링
	개념적 데이터 모델링을 통해 나온 개념을 관계형 데이터 모델에 맞게 매핑하는 작업 
	※ Mapping Rule
	- Entity -> Table
	- Attribute -> Column
	- Relation -> PK, FK
	참고 ( ER Master : http://ermaster.sourceforge.net/ )
		이클립스에서 설치하여 매핑하여 관계도를 작성할 수 있음
	
	1. 1 : 1 관계 
		Relationship → PK (main : 저자) : FK (reference : 휴면자) 
			          Mandatory            Optional
						
	2. 1 : N 관계 
		1:N 관계에서는 1에서 PK, N에서 FK를 지정
		
	3. N:M 관계
		1. 한명의 저자가 여러 글을 작성 가능하고 하나의 글을 여러 저자가 작성이 가능 
		2. N과 M의 연결을 위해 mapping table을 작성하여 저자가 작성한 글을 정리
		3. erd에서는 표현이 되어있기 때문에, ER Master에만 추가하면 됨
		
 3-1. Normalization(정규화) 
	정제되지 않은 데이터를 관계형 데이터베이스로 만드는 레시피 
	참고  http://bit.ly/2wV2SFj 
	
	1. First Normal Form (제1정규화)
		Atomic columns : 각각의 컬럼에는 하나의 값만 가짐
			1. 예제 파일에서 tag 컬럼이 (rab, free) 하나의 값이 아니므로 새로운 매핑 테이블 작성
			2. 중복값으로 인한 컬럼을 해결하기 위해 매핑 테이블 작성방법
			   1. 해당컬럼을 구성하는 개별 속성마다 id를 부여
			   2. 원 테이블의 PK와 위의 속성 id를 연결
	
	2. Second Normal Form (제2정규화)
		No partial dependencies : 부분 종속성이 없어야 한다.
		테이블 내 N개의 컬럼의 내용 중 일부분이 PK 컬럼 외 특정 컬럼에 종속적이면 안되고, 부분 종속 컬럼은 분리해야 함. 
	
	3. Third Normal Form (제3정규화)
		No transitive dependencies : 이행적 종속성
			1. 기존테이블 내 종속된 컬럼들은 분리한다. 
			2. 분리할 때 분리된 컬럼의 PK에 해당하는 컬럼을 남겨 두 테이블의 관계를 남겨둔다.
			3. 분리하는 컬럼을 대표하는 PK 역할을 하는 컬럼이 없을 경우 PK를 새로 부여한다. 
			※ 테이블 내에 중복적인 내용이 있을경우 분리 
			
 4. 물리적 데이터 모델링 
	find slow query : 이상적인 정규화로 인해 속도향상이 없을경우 느려지는 병목지점을 찾아봐야함. 
		1차 대안으로는 index나 application 의 cach 기능을 통해 병목지점을 개선시켜보고 안될 경우 
	denormalization 을 실행해야 함. (역정규화는 혹독한 댓가를 치루야 하므로 1차 대안을 먼저 찾아야 함.
	
 4-1. denormalization (역정규화)  
	정규화를 통해 만든 이상적인 표를 성능이나 개발 편의성을 위해 구조를 바꾸는 것으로 read 성능 희생을 통해 write 향상시킴
	※ 정규화 실시 후 필요시 역정규화 해야함.
	
	1. 컬럼중복 : JOIN을 줄이기
		정규화 과정에서 중복된 컬럼을 분리하는 과정에서 JOIN으로 인해 속도가 느려지는 현상이 발생할 경우 테이블내 중복을 허용
	
	2. 파생컬럼의 형성 : 계산작업을 줄이기 
		필요한 자료를 얻기위해 계산작업을 사용하는 데 이로인해 속도가 느려질 경우 자주사용하는 계산값을 테이블내 컬럼을 추가하여 적용
		
	3. 테이블의 역정규화 - 컬럼을 기준으로 테이블을 분리
		description이란 컬럼에 포함된 데이터가 크다면 PK컬럼과 description이란 컬럼을 원 테이블에서 분리할 경우 속도가 향상 됨
		이를 샤딩이라고 불림(사용방법이 어려워서 최후에 사용)
		
	4. 테이블의 역정규화 - 행을 기준으로 테이블 분리
		예제와 같이 author_id가 수만 행이 존재할 경우 테이블 조회시마다 수만 건의 데이터를 불러와야 하는데 이경우 속도가 느려지는 현상 발생
		이 경우 author_id rkqdmf 1,000단위씩 테이블을 나눌경우 id 조회시 불러오는 데이터량을 줄여 속도를 향상시킬 수 있음
		단, 사고위험이 높아 적용시 주의 필요
		
	5. 관계의 역정규화 - 지름길을 만든다.
		원하는 정보가 담긴 두 테이블에 PK 역할을 하는 정보가 없을 경우, PK정보가 담긴 테이블까지 합쳐 3개의 테이블을 JOIN 하게 되면 
		속도가 느려지는 현상 발생.
		※ 해당 PK정보가 없는 테이블 내에 FK 컬럼을 추가를 통해 해당 정보를 반영하여 JOIN 횟수를 줄여 속도를 높임.
		
		
		